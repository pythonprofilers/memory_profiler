#! /usr/bin/env python
import sys

try:
    import pylab as pl
except ImportError:
    print("matplotlib is needed for plotting.")
    sys.exit(1)

import numpy as np
import math
import glob
import time
import os
import os.path as osp


def add_brackets(xloc, yloc, xshift=0, color="r", label=None):
    """Add two brackets on the memory line plot.

    This function uses the current figure.

    Parameters
    ==========
    xloc: tuple with 2 values
        brackets location (on horizontal axis).
    yloc: tuple with 2 values
        brackets location (on vertical axis)
    xshift: float
        value to subtract to xloc.
    """

    height_ratio = 20.
    vsize = (pl.ylim()[1] - pl.ylim()[0]) / height_ratio
    hsize = (pl.xlim()[1] - pl.xlim()[0]) / (3.*height_ratio)

    bracket_x = pl.asarray([hsize, 0, 0, hsize])
    bracket_y = pl.asarray([vsize, vsize, -vsize, -vsize])

    # Matplotlib workaround: labels starting with _ aren't displayed
    if label[0] == '_':
        label = ' ' + label
    pl.plot(bracket_x + xloc[0] - xshift, bracket_y + yloc[0],
            "-" + color, linewidth=2, label=label)
    pl.plot(-bracket_x + xloc[1] - xshift, bracket_y + yloc[1],
            "-" + color, linewidth=2 )

    # TODO: use matplotlib.patches.Polygon to draw a colored background for
    # each function.

    # with maplotlib 1.2, use matplotlib.path.Path to create proper markers
    # see http://matplotlib.org/examples/pylab_examples/marker_path.html
    # This works with matplotlib 0.99.1
    ## pl.plot(xloc[0], yloc[0], "<"+color, markersize=7, label=label)
    ## pl.plot(xloc[1], yloc[1], ">"+color, markersize=7)


def read_mprofile_file(filename):
    ret = {}
    mdata = []
    f = open(filename, "r")
    for l in f:
        fields = l.split()
        if fields[0] == "MEM":
            # mem, timestamp
            mdata.append((fields[1], fields[2]))

        elif fields[0] == "FUNC":
            f_name, mem_start, start, mem_end, end = fields[1:]
            ts = ret.get(f_name, [])
            ts.append([float(start), float(end), float(mem_start), float(mem_end)])
            ret[f_name] = ts

        else:
            pass
    f.close()

    mdata = np.asarray(mdata,
                       dtype=[("mem", np.float), ("timestamp", np.float)])
    return mdata, ret



def plot_file(filename, index=0, timestamps=True):
    mdata, ts = read_mprofile_file(filename)

    global_start = float(mdata["timestamp"][0])

    mem = mdata["mem"]
    max_mem = mem.max()
    max_mem_ind = mem.argmax()

    t = mdata["timestamp"] - global_start

    all_colors=("c", "y", "g", "r", "b")
    mem_line_colors=('k', "b", "r")
    mem_line_label = time.strftime("%d / %m / %Y - start at %H:%M:%S",
                                   time.localtime(global_start)) \
                                   + ".{0:03d}".format(int(round(math.modf(global_start)[0]*1000)))

    pl.plot(t, mem, "+-" + mem_line_colors[index % len(mem_line_colors)],
            label=mem_line_label)

    bottom, top = pl.ylim()
    bottom += 0.001
    top -= 0.001

    # plot timestamps, if any
    if len(ts) > 0 and timestamps:
        func_num = 0
        for f, exec_ts in ts.iteritems():
            for execution in exec_ts:
                add_brackets(execution[:2], execution[2:], xshift=global_start,
                             color= all_colors[func_num % len(all_colors)],
                             label=f.split(".")[-1]
                             + " %.3fs" % (execution[1] - execution[0]))
            func_num += 1

    if timestamps:
        pl.hlines(max_mem,
                  pl.xlim()[0] + 0.001, pl.xlim()[1] - 0.001,
                  colors="r", linestyles="--")
        pl.vlines(t[max_mem_ind], bottom, top,
                  colors="r", linestyles="--")


if __name__ == "__main__":
    profiles = glob.glob("mprofile_??????????????.dat")
    profiles.sort()

    if len(sys.argv) == 1:
        if len(profiles) == 0:
            print("No input file found. \nThis program looks for "
                  "mprofile_*.dat files, generated by the mprofile command.")
            sys.exit(-1)
        filenames = [profiles[-1]]
    else:
        filenames = []
        for arg in sys.argv[1:]:
            if osp.exists(arg):
                if not arg in filenames:
                    filenames.append(arg)
            else:
                try:
                    n = int(arg)
                except ValueError:
                    print("Input file not found: " + arg)
                if not profiles[n] in filenames:
                    filenames.append(profiles[n])

    pl.figure(figsize=(14, 6), dpi=90)
    if len(filenames) > 1:
        timestamps = False
    else:
        timestamps = True
    for n, filename in enumerate(filenames):
        plot_file(filename, index=n, timestamps=timestamps)
    pl.xlabel("time [s]")
    pl.ylabel("memory used [MB]")

    ax = pl.gca()
    box = ax.get_position()
    ax.set_position([0.07, 0.1,
                     0.55, 0.8])
    ax.legend(loc="upper left", bbox_to_anchor=(1.05, 1.))
    pl.grid()
    pl.show()

